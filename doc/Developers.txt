=== API ===
hook(string type, function callback[, object options])
	string type
		'data'
			callback is called every time data is recieved from the server.
				function callback(match,data,replyTo,connection)
					match
						the match object ( uses regex.exec )
					data
						the data string.
					replyTo
						who send the data.
					connection
						irc connection object that it was sent from.
				object options
					regex
						regex to compare the string to
					once
						if set to true, this will only be called once and then the hook will be removed.
		'reply'
			callback is called when a privmsg is sent
				function callback(replyTo,msg,connection)
					match
						the match object ( uses regex.exec )
					replyTo
						who sent the privmsg
					msg
						what they sent
					connection
						irc connection object that it was sent from
		'send'
			callback is called when anything other then privmsg is sent to the server
				function callback(match,msg,connection)
					msg
						what they sent
					connection
						irc connection object that it was sent from
				object options
					regex
						regex to compare the string to
					once
						if set to true, this will only be called once and then the hook will be removed.
		'load'
			callback is called after scripts are loaded
		'unload'
			callback is called before scripts are unloaded.
			Good for removing more complex hooks made by scripts that don't follow the api spec.
reply_listen(function callback);
	shortcut for creating a reply hook
		function callback(replyTo,msg,connection);
			replyTo:
				who sent the privmsg
			msg:
				what they sent
			connection:
				irc connection object that it was sent from
send_listen(regex dataRegex, function callback[, bool once]);
	shortcut for creating a send hook
		regex dataRegex:
			regex to compare the data to.
		function callback(msg,connection);
			msg:
				what they sent
			connection:
				irc connection object that it was sent from
		bool once:
			if set to true, this will only be called once and then the hook will be removed.
listen(regex dataRegex, function callback[, bool once]);
	shortcut for creating a data hook.
		regex dataRegex:
			regex to compare the data to.
		function callback(match,data,replyTo,connection);
			match:
				the match object ( uses regex.exec )
			data:
				the data string.
			replyTo:
				who send the data.
			connection:
				irc connection object that it was sent from.
		bool once:
			if set to true, this will only be called once and then the hook will be removed.
disp
	console display and logging.
	disp.alert()
		pass any arguments to this and it will show an alert in the console for each of them
	disp.error()
		pass any arguments to this and it will show them in the console and log them to the error logs.
	disp.out()
		give an out message for each argument.
	disp.in()
		give an in message for each argument.
	disp.log(string msg[, bool log])
		display on the console and log
			string msg:
				the string to display
			bool log
				if set to true the data will be stored in the error logs.
rCommand(string name[,bool isArgs])
	Returns the RegExp for a command
		string name
			command name to be used
		bool isArgs
			if set to true the command will also look for args.
getUser(string nick)
	Returns the user object for the specified nick
addUser(string nick[,string flags,array hosts])
	Adds a new user to the database.
		nick
			Nickname of the user to add
		flags
			flags to give the user. format is:
				o - op
				v - voice
				b - ban
		hosts
			Hosts other then the one the user currently has (If the user exists on any of the servers).
removeUser(string nick)
	Removes the user with the specified nick.
validUser(string nick, string host)
	returns true if the nick matches the host
isOp(string nick)
	returns true if the user is opped
user
	object with all information pertaining to a user
		user.nick
			the nick of the user
		user.flags
			The users flags. Can be treated like a string
				user.flags
					user.flags.op
						flag for if the user should be opped
					user.flags.voice
						flag for if the user should be voiced
					user.flags.ban
						flag for if the user should be banned
		user.hosts
			An array of all the valid hosts masks for the user (can be either a string or regex)
irc
	object to store a connection as well as associated functions and data.
		irc.config
			configuration for the connection
				irc.config.host
					hostname of the connection
				irc.config.port
					port to connect on
				irc.config.nickserv
					nickserv password to send.
				irc.config.nick
					nick to use on the connection
				irc.config.username
					username to use
				irc.config.name
					name to use
		irc.quit()
			close the connection and handle removal of objects
		irc.send(data)
			send the data to the server
		irc.reply(to,msg)
			reply to a privmsg on the server
				to
					Name of the user or channel to reply to
				msg:
					What to reply with
config
	object to store user configuration of the bot
		config.prefix
			Default command prefix to use. It is best practice to use this instead of hard coding it into your commands.
		config.name
			Default name this bot will use.
		config.nick
			Default nick this bot will use.
		config.username
			Default username this bot will use.
exit()
	close all connections and exit the bot
regHelp(name,help)
	register a command in the help block so that information can be displayed.
		name
			name of the command
		help
			the help message to display
listdb
	Used to store data
		listdb.getDB(string name)
			Returns a db object
db
	object used for getting and storing data
		db.getName()
			returns the name of the database
		db.getAll()
			returns all the values in the database as an array
		db.hasValue(string value)
			returns true or false if the value exists in the database
		db.add(string value)
			adds a value to the database
		db.remove(string value)
			remove a value from the database
connections
	An array of all the irc connection objects